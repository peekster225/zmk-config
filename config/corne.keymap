/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        LeftControl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <2 14>;
        };

        LeftAlt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <3 15>;
        };

        LeftCommand {
            bindings = <&kp LEFT_WIN>;
            key-positions = <4 16>;
        };

        RightControl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <9 21>;
        };

        RightAlt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <8 20>;
        };

        RightCommand {
            bindings = <&kp LEFT_WIN>;
            key-positions = <7 19>;
        };

        LeftEnter {
            bindings = <&kp ENTER>;
            key-positions = <16 15 14>;
        };

        RightEnter {
            bindings = <&kp ENTER>;
            key-positions = <19 20 21>;
        };

        LeftTab {
            bindings = <&kp TAB>;
            key-positions = <13 14 15>;
        };

        RightTab {
            bindings = <&kp TAB>;
            key-positions = <22 21 20>;
        };

        LeftEscape {
            bindings = <&kp ESCAPE>;
            key-positions = <4 3 2>;
        };

        RightEscape {
            bindings = <&kp ESCAPE>;
            key-positions = <7 8 9>;
        };

        Equals {
            bindings = <&kp KP_EQUAL>;
            key-positions = <7 8>;
        };

        Minus {
            bindings = <&kp KP_SUBTRACT>;
            key-positions = <19 20>;
        };

        Underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <31 32>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <19 21>;
        };

        LBracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <7 22>;
        };

        RBracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <22 8>;
        };

        LBrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <31 22>;
        };

        RBrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <22 32>;
        };

        LParen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 22>;
        };

        RParen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <22 20>;
        };

        ForwardSlash {
            bindings = <&kp SLASH>;
            key-positions = <31 20>;
        };

        BackSlash {
            bindings = <&kp BACKSLASH>;
            key-positions = <19 32>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <31 8>;
        };

        Caret {
            bindings = <&kp CARET>;
            key-positions = <19 8 21>;
        };

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <20 7>;
        };

        Tilde {
            bindings = <&kp TILDE>;
            key-positions = <19 9>;
        };

        Percent {
            bindings = <&kp PERCENT>;
            key-positions = <31 20 33>;
        };

        Bang {
            bindings = <&kp EXCL>;
            key-positions = <7 8 21>;
        };

        Question {
            bindings = <&kp QUESTION>;
            key-positions = <19 20 9>;
        };

        Money {
            bindings = <&kp DOLLAR>;
            key-positions = <32 21 31>;
        };

        AtSign {
            bindings = <&kp AT>;
            key-positions = <7 20 21>;
        };

        Ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <20 21 19 22>;
        };

        Asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <33 31>;
        };

        SemiColon {
            bindings = <&kp SEMI>;
            key-positions = <33 32>;
        };

        Hashtag {
            bindings = <&kp HASH>;
            key-positions = <7 9>;
        };

        LeftBackspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 15 13 14>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&trans  &kp Q  &kp W  &kp F  &kp P           &kp B        &kp J      &kp L          &kp U      &kp Y    &kp SEMICOLON  &trans
&trans  &kp A  &kp R  &kp S  &kp T           &kp G        &kp M      &kp N          &kp E      &kp I    &kp O          &kp SQT
&trans  &kp Z  &kp X  &kp C  &kp D           &kp V        &kp K      &kp H          &kp COMMA  &kp DOT  &kp SLASH      &trans
                      &mo 1  &kp LEFT_SHIFT  &kp SPACE    &kp ENTER  &kp BACKSPACE  &mo 4
            >;
        };

        num {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &kp N7  &kp N8  &kp N9  &trans   &trans
&trans  &trans  &trans  &trans  &mo 2   &trans    &kp NUMBER_0  &kp N4  &kp N5  &kp N6  &kp DOT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &kp N1  &kp N2  &kp N3  &trans   &trans
                        &trans  &trans  &trans    &trans        &trans  &mo 3
            >;
        };

        f_keys {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp F12  &kp F7  &kp F8  &kp F9  &kp C_PAUSE      &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp F11  &kp F4  &kp F5  &kp F6  &kp SLCK         &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp F10  &kp F1  &kp F2  &kp F3  &kp PRINTSCREEN  &trans
                        &trans  &trans  &trans    &trans   &trans  &trans
            >;
        };

        command {
            bindings = <
&trans  &kp LC(Q)  &kp LC(W)  &kp LC(F)  &kp LC(P)  &kp LC(B)    &kp LC(J)  &kp LC(L)  &kp LC(U)      &kp LC(Y)    &kp LC(SEMICOLON)  &trans
&trans  &kp LC(A)  &kp LC(R)  &kp LC(S)  &kp LC(T)  &kp LC(G)    &kp LC(M)  &kp LC(N)  &kp LC(E)      &kp LC(I)    &kp LC(O)          &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(D)  &kp LC(V)    &kp LC(K)  &kp LC(H)  &kp LC(COMMA)  &kp LC(DOT)  &kp LC(SLASH)      &trans
                              &trans     &trans     &trans       &trans     &trans     &trans
            >;
        };

        misc {
            bindings = <
&trans      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &kp K_MUTE    &kp K_VOLUME_DOWN  &kp K_VOLUME_UP  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &trans        &trans        &trans             &trans           &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans             &trans           &trans          &trans  &trans  &trans
            >;
        };
    };
};
